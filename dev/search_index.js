var documenterSearchIndex = {"docs":
[{"location":"functions/","page":"Functions","title":"Functions","text":"","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"deim","category":"page"},{"location":"functions/#ModelOrderReduction.deim","page":"Functions","title":"ModelOrderReduction.deim","text":"deim(\n    full_vars,\n    linear_coeffs,\n    constant_part,\n    nonlinear_part,\n    reduced_vars,\n    linear_projection_matrix,\n    nonlinear_projection_matrix;\n    kwargs...\n)\n\n\nCompute the reduced model by applying the Discrete Empirical Interpolation Method (DEIM).\n\nThis method allows users to input the projection matrices of their choice.\n\nGiven the projection matrix Vinmathbb R^ntimes k for the dependent variables mathbf yinmathbb R^n and the projection matrix Uinmathbb R^ntimes m for the nonlinear function mathbf Finmathbb R^n, the full-order model (FOM)\n\nfracddtmathbf y(t)=Amathbf y(t)+mathbf g(t)+mathbf F(mathbf y(t))\n\nis transformed to the reduced-order model (ROM)\n\nfracddthatmathbf y(t)=underbraceV^TAV_ktimes khatmathbf y(t)+V^T\nmathbf g(t)+underbraceV^TU(P^TU)^-1_ktimes munderbraceP^Tmathbf F(V\nhatmathbf y(t))_mtimes1\n\nwhere P=mathbf e_rho_1dotsmathbf e_rho_minmathbb R^ntimes m, rho_1dotsrho_m are interpolation indices from the DEIM point selection algorithm, and mathbf e_rho_i=0ldots010ldots0^Tinmathbb R^n is the rho_i-th column of the identity matrix I_ninmathbb R^ntimes n.\n\nArguments\n\nfull_vars::AbstractVector: the dependent variables undersetntimes 1mathbf y in FOM.\nlinear_coeffs::AbstractMatrix: the coefficient matrix undersetntimes nA of linear terms in FOM.\nconstant_part::AbstractVector: the constant terms undersetntimes 1mathbf g in FOM.\nnonlinear_part::AbstractVector: the nonlinear functions undersetntimes 1mathbf F in FOM.\nreduced_vars::AbstractVector: the dependent variables undersetktimes 1hatmathbf y in the reduced-order model.\nlinear_projection_matrix::AbstractMatrix: the projection matrix undersetntimes kV for the dependent variables mathbf y.\nnonlinear_projection_matrix::AbstractMatrix: the projection matrix undersetntimes mU for the nonlinear functions mathbf F.\n\nReturn\n\nreduced_rhss: the right-hand side of ROM.\nlinear_projection_eqs: the linear projection mapping mathbf y=Vhatmathbf y.\n\n\n\n\n\ndeim(\n    sys::ModelingToolkit.ODESystem,\n    snapshot::AbstractMatrix,\n    pod_dim::Integer;\n    deim_dim::Integer = pod_dim,\n    name::Symbol = Symbol(nameof(sys), :_deim),\n    kwargs...\n) -> ModelingToolkit.ODESystem\n\nReduce a ModelingToolkit.ODESystem using the Proper Orthogonal Decomposition (POD) with the Discrete Empirical Interpolation Method (DEIM).\n\nsnapshot should be a matrix with the data of each time instance as a column.\n\nThe LHS of equations in sys are all assumed to be 1st order derivatives. Use ModelingToolkit.ode_order_lowering to transform higher order ODEs before applying DEIM.\n\nsys is assumed to have no internal systems. End users are encouraged to call ModelingToolkit.structural_simplify beforehand.\n\nThe POD basis used for DEIM interpolation is obtained from the snapshot matrix of the nonlinear terms, which is computed by executing the runtime-generated function for nonlinear expressions.\n\n\n\n\n\n","category":"function"},{"location":"tutorials/deim_FitzHugh-Nagumo/#Discrete-Empirical-Interpolation-Method-(DEIM)","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"","category":"section"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"This section illustrates how ModelOrderReduction.jl can be used to build a reduced order model via Petrov-Galerkin projection using the Proper Orthogonal Decomposition (POD) and the Discrete Empirical Interpolation Method (DEIM). As an illustrative example, we consider a nonlinear 1-D PDE from the realm of neuroscience.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"The FitzHugh-Nagumo system used in neuron modeling is a simplified version of the Hodgkin-Huxley model, which describes in a detailed manner activation and deactivation dynamics of a spiking neuron. The system is given as follows. For xin 0L tgeq 0,","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"beginaligned\nvarepsilon v_t(xt)=varepsilon^2 v_xx(xt)+f(v(xt))-w(xt)+c\nw_t(xt)=bv(xt)-gamma w(xt)+c\nendaligned","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"with nonlinear function f(v)=v(v-01)(1-v). The initial and boundary conditions are","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"beginaligned\nv(x0)=0quad w(x0)=0quad xin 0L\nv_x(0t)=-i_0(t)quad v_x(Lt)=0quad tgeq 0\nendaligned","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"where the parameters are L=1, varepsilon=0015, b=05, gamma =2, c=005. The stimulus is i_0(t)=50000t^3exp(-15t). The variables v and w are voltage and recovery of voltage, respectively.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"In order to generate a POD-DEIM reduced-order model, we need to work through the following steps:","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"Collect data on full-order model trajectories and the nonlinear terms describing its evolution equation along the way.\nBased on the collected data, use POD to identify a low dimensional linear subspace of the system's state space that allows for embedding the full-order model's trajectories with minimal error.\nProject the model onto the identified subspace using DEIM to approximate nonlinear terms.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"For step 1, we first construct a ModelingToolkit.PDESystem describing the original FitzHugh-Nagumo model.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"using ModelingToolkit\n@variables x t v(..) w(..)\nDx = Differential(x)\nDxx = Dx^2\nDt = Differential(t)\nconst L = 1.0\nconst ε = 0.015\nconst b = 0.5\nconst γ = 2.0\nconst c = 0.05\nf(v) = v * (v - 0.1) * (1.0 - v)\ni₀(t) = 50000.0t^3 * exp(-15.0t)\neqs = [ε * Dt(v(x, t)) ~ ε^2 * Dxx(v(x, t)) + f(v(x, t)) - w(x, t) + c,\n    Dt(w(x, t)) ~ b * v(x, t) - γ * w(x, t) + c]\nbcs = [v(x, 0.0) ~ 0.0,\n    w(x, 0) ~ 0.0,\n    Dx(v(0, t)) ~ -i₀(t),\n    Dx(v(L, t)) ~ 0.0]\ndomains = [x ∈ (0.0, L),\n    t ∈ (0.0, 14.0)]\nivs = [x, t]\ndvs = [v(x, t), w(x, t)]\npde_sys = PDESystem(eqs, bcs, domains, ivs, dvs; name = Symbol(\"FitzHugh-Nagumo\"))\nnothing # hide","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"Next, we apply finite difference discretization using MethodOfLines.jl.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"using MethodOfLines\nN = 15 # equidistant discretization intervals\ndx = (L - 0.0) / N\ndxs = [x => dx]\norder = 2\ndiscretization = MOLFiniteDifference(dxs, t; approx_order = order)\node_sys, tspan = symbolic_discretize(pde_sys, discretization)\nsimp_sys = structural_simplify(ode_sys)\node_prob = ODEProblem(simp_sys, nothing, tspan)\nnothing # hide","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"The snapshot trajectories are obtained by solving the full-order system.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"using DifferentialEquations\nsol = solve(ode_prob, Tsit5())\nsol_x = sol[x]\nnₓ = length(sol_x) # number of discretization points in x\nnₜ = length(sol[t]) # number of discretization points in time\nnothing # hide","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"Let's see the fast decay of the singular values of the snapshot solutions for v, w, and the nonlinear snapshots f(v).","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"using LinearAlgebra\nsnapshot_v = sol[v(x, t)]\nsnapshot_w = sol[w(x, t)]\nsnapshot_fv = f.(snapshot_v)\nsvdval_v = svdvals(snapshot_v)\nsvdval_w = svdvals(snapshot_w)\nsvdval_fv = svdvals(snapshot_fv)\nusing Plots, LaTeXStrings\nsvd_plt = plot(yscale = :log10, xticks = eachindex(svdval_v), titlefont = 11,\n               legendfont = 10, title = \"Singular values of the snapshots\")\nplot!(svd_plt, svdval_v, markershape = :circle, label = L\"Singular Val of $v$\")\nplot!(svd_plt, svdval_w, markershape = :circle, label = L\"Singular Val of $w$\")\nplot!(svd_plt, svdval_fv, markershape = :circle, label = L\"Singular Val of $f(v)$\")","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"The following figure shows the phase-space diagram of v and w at different spatial points x from the full-order system.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"full_plt = plot(xlabel = L\"v(x,t)\", ylabel = L\"x\", zlabel = L\"w(x,t)\", xlims = (-0.5, 2.0),\n                ylims = (0.0, L), zlims = (0.0, 0.25), legend = false, xflip = true,\n                camera = (50, 30), titlefont = 10,\n                title = \"Phase−Space diagram of full $(nameof(pde_sys)) system\")\n@views for i in 1:nₓ\n    plot!(full_plt, snapshot_v[i, :], _ -> sol_x[i], snapshot_w[i, :])\nend\nplot!(full_plt)","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"Then, we use POD to construct a linear subspace of dimension, say, 5 for the system's state space and project the model onto the subspace. DEIM is employed to approximate nonlinear terms. This can be done by simply calling deim.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"using ModelOrderReduction\nsnapshot_simpsys = Array(sol.original_sol)\npod_dim = deim_dim = 5\ndeim_sys = deim(simp_sys, snapshot_simpsys, pod_dim)\ndeim_prob = ODEProblem(deim_sys, nothing, tspan)\ndeim_sol = solve(deim_prob, Tsit5())\nnₜ_deim = length(deim_sol[t])\nsol_deim_x = deim_sol[x]\nsol_deim_v = deim_sol[v(x, t)]\nsol_deim_w = deim_sol[w(x, t)]\nnothing # hide","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"And plot the result from the POD-DEIM reduced system.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"deim_plt = plot(xlabel = L\"v(x,t)\", ylabel = L\"x\", zlabel = L\"w(x,t)\", xlims = (-0.5, 2.0),\n                ylims = (0.0, L), zlims = (0.0, 0.25), legend = false, xflip = true,\n                camera = (50, 30), titlefont = 10,\n                title = \"Phase−Space diagram of reduced $(nameof(pde_sys)) system\")\n@views for i in 1:nₓ\n    plot!(deim_plt, sol_deim_v[i, :], _ -> sol_deim_x[i], sol_deim_w[i, :])\nend\nplot!(deim_plt)","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"Finally, we put the two solutions in one figure.","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"# create data for plotting unconnected lines\nfunction unconnected(m::AbstractMatrix)\n    row, col = size(m)\n    data = similar(m, row, col + 1)\n    data[:, begin:(end - 1)] .= m\n    data[:, end] .= NaN # path separator\n    vec(data')\nend\nfunction unconnected(v::AbstractVector, nₜ::Integer)\n    data = similar(v, nₜ + 1, length(v))\n    for (i, vᵢ) in enumerate(v)\n        data[begin:(end - 1), i] .= vᵢ\n    end\n    data[end, :] .= NaN\n    vec(data)\nend\nplt_2 = plot(xlabel = L\"v(x,t)\", ylabel = L\"x\", zlabel = L\"w(x,t)\", xlims = (-0.5, 2.0),\n             ylims = (0.0, L), zlims = (0.0, 0.25), xflip = true, camera = (50, 30),\n             titlefont = 10, title = \"Comparison of full and reduced systems\")\nplot!(plt_2, unconnected(snapshot_v), unconnected(sol_x, nₜ), unconnected(snapshot_w),\n      label = \"Full$(length(ode_sys.eqs))\")\nplot!(plt_2, unconnected(sol_deim_v), unconnected(sol_deim_x, nₜ_deim),\n      unconnected(sol_deim_w), label = \"POD$(pod_dim)/DEIM$(deim_dim)\")","category":"page"},{"location":"tutorials/deim_FitzHugh-Nagumo/","page":"Discrete Empirical Interpolation Method (DEIM)","title":"Discrete Empirical Interpolation Method (DEIM)","text":"As we can see, the reduced-order system captures the limit cycle of the original full-order system very well.","category":"page"},{"location":"#ModelOrderReduction.jl","page":"Home","title":"ModelOrderReduction.jl","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install LinearSolve.jl, use the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"ModelOrderReduction\")","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please refer to the SciML ColPrac: Contributor's Guide on Collaborative Practices for Community Packages for guidance on PRs, issues, and other matters relating to contributing to SciML.\nSee the SciML Style Guide for common coding practices and other style decisions.\nThere are a few community forums:\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Slack\nThe #diffeq-bridged and #sciml-bridged channels in the Julia Zulip\nOn the Julia Discourse forums\nSee also SciML Community page","category":"page"},{"location":"#Reproducibility","page":"Home","title":"Reproducibility","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details><summary>The documentation of this SciML package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status(; mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also download the \n<a href=\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TOML\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n       \"/assets/Manifest.toml\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"\">manifest</a> file and the\n<a href=\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TOML\nversion = TOML.parse(read(\"../../Project.toml\", String))[\"version\"]\nname = TOML.parse(read(\"../../Project.toml\", String))[\"name\"]\nlink = \"https://github.com/SciML/\" * name * \".jl/tree/gh-pages/v\" * version *\n       \"/assets/Project.toml\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"\">project</a> file.","category":"page"}]
}
